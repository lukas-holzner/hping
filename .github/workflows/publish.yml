name: Publish to PyPI

on:
  release:
    types:
      - published
  workflow_dispatch: # Allow manual triggering
    inputs:
      tag:
        description: "Git tag to publish (optional - uses latest if not specified)"
        required: false
        type: string

jobs:
  publish:
    name: Upload release to PyPI
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      contents: read
      id-token: write # Required for trusted publishing

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine tag to publish
        id: get-tag
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ inputs.tag }}" ]; then
            TAG="${{ inputs.tag }}"
            echo "Using manual tag: $TAG"
            git checkout $TAG
          elif [ "${{ github.event_name }}" == "release" ]; then
            TAG="${{ github.event.release.tag_name }}"
            echo "Using release tag: $TAG"
          else
            # Get the latest tag for fallback
            TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            echo "Using latest tag: $TAG"
            if [ -n "$TAG" ]; then
              git checkout $TAG
            fi
          fi

          if [ -z "$TAG" ]; then
            echo "No tag found, cannot publish"
            exit 1
          fi

          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Publishing tag: $TAG"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          poetry install --no-interaction
          python -m pip install -U build twine

      - name: Verify version matches tag
        run: |
          POETRY_VERSION=$(poetry version --short)
          TAG_VERSION="${{ steps.get-tag.outputs.tag }}"
          # Remove 'v' prefix if present
          TAG_VERSION=${TAG_VERSION#v}

          echo "Poetry version: $POETRY_VERSION"
          echo "Tag version: $TAG_VERSION"

          if [ "$POETRY_VERSION" != "$TAG_VERSION" ]; then
            echo "Version mismatch! Poetry: $POETRY_VERSION, Tag: $TAG_VERSION"
            exit 1
          fi

      - name: Build distribution
        run: |
          poetry build

      - name: Check distribution
        run: |
          ls -la dist/
          python -m twine check dist/*

      - name: Mint API token
        id: mint-token
        run: |
          # retrieve the ambient OIDC token
          resp=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=pypi")
          oidc_token=$(jq -r '.value' <<< "${resp}")

          # exchange the OIDC token for an API token
          resp=$(curl -X POST https://pypi.org/_/oidc/mint-token -d "{\"token\": \"${oidc_token}\"}")
          api_token=$(jq -r '.token' <<< "${resp}")

          # mask the newly minted API token, so that we don't accidentally leak it
          echo "::add-mask::${api_token}"

          # output the API token for the next step
          echo "api-token=${api_token}" >> "${GITHUB_OUTPUT}"

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ steps.mint-token.outputs.api-token }}
          packages-dir: dist/
          skip-existing: true
          verbose: true

      - name: Create release summary
        run: |
          echo "## Published to PyPI ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.get-tag.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Package:** https://pypi.org/project/hping/" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Install with:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo 'pip install hping' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
